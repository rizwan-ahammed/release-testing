name: Release Published Pipeline
run-name: Pipeline triggered by published release

on:
  release:
    types: [published]

jobs:
  release-pipeline:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      actions: read
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get release information
        id: release_info
        run: |
          echo "release_tag=${{ github.event.release.tag_name }}" >> $GITHUB_OUTPUT
          echo "release_name=${{ github.event.release.name }}" >> $GITHUB_OUTPUT
          # Handle multi-line release body using GitHub Actions multi-line output syntax
          echo "release_body<<EOF" >> $GITHUB_OUTPUT
          echo "${{ github.event.release.body }}" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          echo "release_url=${{ github.event.release.html_url }}" >> $GITHUB_OUTPUT

      - name: Setup SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.COMBAT_INFRA_DEPLOY_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan github.com >> ~/.ssh/known_hosts
          
      - name: push tag to combat-infra helm repo
        run: |
          # Clone combat-infra repo using SSH
          git clone git@github.com:KeyValueSoftwareSystems/combat-infra.git combat-infra
          cd combat-infra
          # checkout the main branch
          git checkout release-test
          git config --global user.email "netra-release-bot@github.com"
          git config --global user.name "Netra Release Bot"
          # Update image tag in values.yaml
          sed -i "s/tag: .*/tag: ${{ steps.release_info.outputs.release_tag }}/" k8s/netra-services/nginx/dev/ap-south-1/values.yaml
          
          # Commit and push
          git add k8s/netra-services/nginx/dev/ap-south-1/values.yaml
          git commit -m "Release version to ${{ steps.release_info.outputs.release_tag }}"
          git push origin release-test
          
      - name: Setup ArgoCD CLI
        run: |
          # Install ArgoCD CLI
          curl -sSL -o argocd-linux-amd64 https://github.com/argoproj/argo-cd/releases/latest/download/argocd-linux-amd64
          install -m 555 argocd-linux-amd64 /usr/local/bin/argocd
          rm argocd-linux-amd64
          
          # Install jq for JSON parsing
          sudo apt-get update
          sudo apt-get install -y jq

      - name: Run deployment to production
        run: |
          # Login to ArgoCD
          export ARGOCD_AUTH_TOKEN=${{ secrets.ARGOCD_AUTH_TOKEN }}
          export ARGOCD_SERVER=${{ vars.ARGOCD_SERVER }}
          export ARGOCD_OPTS="--grpc-web --insecure --skip-test-tls"
          
          # Check if sync is already running
          echo "Checking if sync is already in progress..."
          operation_status=$(argocd app get nginx --output json | jq -r ".status.operationState.phase // \"NoOperation\"")
          
          if [ "$operation_status" = "Running" ]; then
            echo "⚠️ Sync is already in progress, skipping sync operation"
            echo "Current operation: $operation_status"
          else
            echo "✅ No sync in progress, proceeding with sync..."
            # Refresh the specific application
            argocd app sync nginx --prune
          fi
          
          # Wait for deployment status with timeout (5 minutes)
          timeout 300 bash -c '
            while true; do
              status=$(argocd app get nginx --output json | jq -r ".status.sync.status")
              health=$(argocd app get nginx --output json | jq -r ".status.health.status")
              
              echo "Sync Status: $status, Health Status: $health"
              
              if [ "$status" = "Synced" ] && [ "$health" = "Healthy" ]; then
                echo "✅ Deployment successful!"
                exit 0
              elif [ "$status" = "OutOfSync" ] || [ "$status" = "Unknown" ]; then
                echo "❌ Deployment failed!"
                exit 1
              fi
              
              sleep 10
            done
          '
          
          # Get final status for notification
          final_status=$(argocd app get nginx --output json | jq -r ".status.sync.status")
          final_health=$(argocd app get nginx --output json | jq -r ".status.health.status")
          
          if [ "$final_status" = "Synced" ] && [ "$final_health" = "Healthy" ]; then
            echo "DEPLOYMENT_STATUS=success" >> $GITHUB_ENV
          else
            echo "DEPLOYMENT_STATUS=failed" >> $GITHUB_ENV
            exit 1
          fi
      - name: Notify Slack about pipeline completion
        if: success()
        run: |
          curl -s -X POST \
            -H "Authorization: Bearer ${{ secrets.SLACK_BOT_TOKEN }}" \
            -H 'Content-type: application/json' \
            --data "{
              \"channel\": \"${{ vars.SLACK_CHANNEL }}\",
              \"text\": \":rocket: Pipeline and deployment completed for release *${{ steps.release_info.outputs.release_tag }}*\",
              \"blocks\": [
                {
                  \"type\": \"section\",
                  \"text\": {\"type\": \"mrkdwn\", \"text\": \":rocket: *Pipeline and Deployment Completed Successfully!*\\n\\nRelease: *${{ steps.release_info.outputs.release_tag }}*\\nName: ${{ steps.release_info.outputs.release_name }}\"}
                },
                {
                  \"type\": \"section\",
                  \"accessory\": {
                    \"type\": \"button\",
                    \"text\": {\"type\": \"plain_text\", \"text\": \"View Release\", \"emoji\": true},
                    \"url\": \"${{ steps.release_info.outputs.release_url }}\",
                    \"style\": \"primary\"
                  },
                  \"fields\": [
                    {\"type\": \"mrkdwn\", \"text\": \"*Status:*\\n✅ Completed\"},
                    {\"type\": \"mrkdwn\", \"text\": \"*Repository:*\\n${{ github.repository }}\"},
                    {\"type\": \"mrkdwn\", \"text\": \"*Deployment:*\\n✅ ArgoCD Sync Successful\"}
                  ]
                }
              ]
            }" https://slack.com/api/chat.postMessage

      - name: Notify Slack about pipeline failure
        if: failure()
        run: |
          curl -s -X POST \
            -H "Authorization: Bearer ${{ secrets.SLACK_BOT_TOKEN }}" \
            -H 'Content-type: application/json' \
            --data "{
              \"channel\": \"${{ vars.SLACK_CHANNEL }}\",
              \"text\": \":x: Pipeline or deployment failed for release *${{ steps.release_info.outputs.release_tag }}*\",
              \"blocks\": [
                {
                  \"type\": \"section\",
                  \"text\": {\"type\": \"mrkdwn\", \"text\": \":x: *Pipeline or Deployment Failed!*\\n\\nRelease: *${{ steps.release_info.outputs.release_tag }}*\\nName: ${{ steps.release_info.outputs.release_name }}\"}
                },
                {
                  \"type\": \"section\",
                  \"accessory\": {
                    \"type\": \"button\",
                    \"text\": {\"type\": \"plain_text\", \"text\": \"View Release\", \"emoji\": true},
                    \"url\": \"${{ steps.release_info.outputs.release_url }}\",
                    \"style\": \"danger\"
                  },
                  \"fields\": [
                    {\"type\": \"mrkdwn\", \"text\": \"*Status:*\\n❌ Failed\"},
                    {\"type\": \"mrkdwn\", \"text\": \"*Repository:*\\n${{ github.repository }}\"},
                    {\"type\": \"mrkdwn\", \"text\": \"*Deployment:*\\n❌ ArgoCD Sync Failed\"}
                  ]
                }
              ]
            }" https://slack.com/api/chat.postMessage
