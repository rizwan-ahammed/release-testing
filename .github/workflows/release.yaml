name: Custom Release
run-name: Production Release Drafter
on:
  push:
    branches:
      - main

jobs:
  release:
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0   # we need full history to generate changelog

      - name: Get last tag
        id: lasttag
        run: |
          git fetch --tags
          TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "0.0.0")
          echo "tag=$TAG" >> $GITHUB_OUTPUT

      - name: Bump minor version
        id: bump
        run: |
          IFS='.' read -r MAJOR MINOR PATCH <<< "${{ steps.lasttag.outputs.tag }}"
          NEW_TAG="$MAJOR.$((MINOR+1)).0"
          echo "new_tag=$NEW_TAG" >> $GITHUB_OUTPUT

      - name: Generate changelog
        id: changelog
        run: |
          PREV_TAG="${{ steps.lasttag.outputs.tag }}"
          NEW_TAG="${{ steps.bump.outputs.new_tag }}"
          if [ "$PREV_TAG" = "0.0.0" ]; then
            LOG=$(git log --pretty=format:"- %s (%an)")
          else
            LOG=$(git log $PREV_TAG..HEAD --pretty=format:"- %s (%an)")
          fi
          echo "log<<EOF" >> $GITHUB_OUTPUT
          echo "$LOG" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_REGION }}

      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: ${{ vars.ECR_REPO }}:${{ steps.bump.outputs.new_tag }}
      
      - name: Create draft release
        id: release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.bump.outputs.new_tag }}
          name: "ðŸš€ Release ${{ steps.bump.outputs.new_tag }}"
          body: |
            ## Release Notes
            <!-- add any release notes here -->

            ## ðŸ”¥ What's Changed
            ${{ steps.changelog.outputs.log }}

            ---
            
            ## ðŸ“‹ Full Changelog
            ðŸ”— **[View all changes â†’](https://github.com/${{ github.repository }}/compare/${{ steps.lasttag.outputs.tag }}...${{ steps.bump.outputs.new_tag }})**
          draft: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Send Draft Release URL to Slack
        id: slack_release
        run: |
          # Get release approvers from GitHub variables (JSON format)
          RELEASE_APPROVERS='${{ vars.RELEASE_APPROVERS }}'
          
          # Extract all Slack IDs from JSON and format as mentions
          SLACK_MENTIONS=$(echo "$RELEASE_APPROVERS" | jq -r 'to_entries | .[] | "<@" + .value + ">"' | tr '\n' ' ')
          
          # Format the mention text with all approvers
          MENTION_TEXT="$SLACK_MENTIONS please review and publish for production deployment"
          
          response=$(curl -s -X POST \
            -H "Authorization: Bearer ${{ secrets.SLACK_BOT_TOKEN }}" \
            -H 'Content-type: application/json' \
            --data "{
              \"channel\": \"${{ vars.SLACK_CHANNEL }}\",
              \"text\": \":package: New release draft is created - *${{ steps.bump.outputs.new_tag }}* $MENTION_TEXT\",
              \"blocks\": [
                {
                  \"type\": \"section\",
                  \"text\": {\"type\": \"mrkdwn\", \"text\": \":package: New release draft is created - *${{ steps.bump.outputs.new_tag }}*\\n\\n$MENTION_TEXT\"}
                },
                {
                  \"type\": \"section\",
                  \"accessory\": {
                    \"type\": \"button\",
                    \"text\": {\"type\": \"plain_text\", \"text\": \"View Release\", \"emoji\": true},
                    \"url\": \"${{ steps.release.outputs.url }}\",
                    \"style\": \"primary\"
                  },
                  \"fields\": [
                    {\"type\": \"mrkdwn\", \"text\": \"*Release Version:*\\n${{ steps.bump.outputs.new_tag }}\"},
                    {\"type\": \"mrkdwn\", \"text\": \"*Repository:*\\n${{ github.repository }}\"}
                  ]
                }
              ]
            }" https://slack.com/api/chat.postMessage)

          echo "slack_ts=$(echo $response | jq -r '.ts')" >> $GITHUB_OUTPUT
          echo "slack_channel=$(echo $response | jq -r '.channel')" >> $GITHUB_OUTPUT
          
          # Store Slack timestamp as environment variable for use in other workflows
          echo "SLACK_TS=$(echo $response | jq -r '.ts')" >> $GITHUB_ENV
          
          # Store Slack timestamp for cross-workflow access
          SLACK_TS_VALUE=$(echo $response | jq -r '.ts')
          echo "SLACK_TS_VALUE=$SLACK_TS_VALUE" >> $GITHUB_ENV

      # - name: Send follow-up thread message
      #   if: always()   # you can adjust condition to only send after deploy
      #   run: |
      #     curl -s -X POST \
      #       -H "Authorization: Bearer ${{ secrets.SLACK_BOT_TOKEN }}" \
      #       -H 'Content-type: application/json' \
      #       --data "{
      #         \"channel\": \"${{ steps.slack_release.outputs.slack_channel }}\",
      #         \"text\": \":white_check_mark: Deployment finished successfully!\",
      #         \"thread_ts\": \"${{ steps.slack_release.outputs.slack_ts }}\"
      #       }" https://slack.com/api/chat.postMessage
